1.- Empezar el proyecto
npx -p @angular/cli@13 ng new jwt-users-system --routing --style=css 
2.- Crear módulos para aplicar Lazy Loading
https://mugan86.medium.com/trabajando-con-lazy-loading-en-angular-8-e1611ce2c46f
ng g m @pages/me --routing
ng g m @pages/users --routing
ng g m @pages/login --routing
ng g m @pages/register --routing

3.- Crear componentes asociados a los módulos
ng g c @pages/me --skip-tests
ng g c @pages/users --skip-tests
ng g c @pages/login --skip-tests
ng g c @pages/register --skip-tests

4.- Añadir el componente en el routing.modules de cada carpeta para poder aplicar bien 
Lazy Loading
Por ejemplo, me-routing.module.ts

import { MeComponent } from './me.component';
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

const routes: Routes = [{
  path: '',                 <=========
  component: MeComponent    <=========
}];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class MeRoutingModule { }

5.- Configurando el fichero principal de rutas

En app-routing.module.ts
const routes: Routes = [
  {
    path: `login`, loadChildren: () =>
      import('./@pages/login/login.module').then(m => m.LoginModule)
  },
  {
    path: `me`, loadChildren: () =>
      import('./@pages/me/me.module').then(m => m.MeModule)
  },
  {
    path: `users`, loadChildren: () =>
      import('./@pages/users/users.module').then(m => m.UsersModule)
  },
  {
    path: `register`, loadChildren: () =>
      import('./@pages/register/register.module').then(m => m.RegisterModule)
  },
  {path: '**', pathMatch: 'full', redirectTo: 'login'}
];

6.- Eliminar todo el contenido de app.component.html excepto <router-outlet></router-outlet>

7.- Comenzar la ejecución de la app

8.- Añadir menu provisional
<div style="text-align:center">
  <h1>
    Sistema usuarios
  </h1>
  <ul>
    <li><a routerLink="/login">Login</a></li>
    <li><a routerLink="/me">Perfil</a></li>
    <li><a routerLink="/users">Usuarios</a></li>
    <li><a routerLink="/register">Registro</a></li>
  </ul>
  
</div>

9.- Añadir estilos de Bootstrap
https://getbootstrap.com/docs/4.6/getting-started/introduction/
Añadir en styles.css
@import url("https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css");

En index.html
 <script
      src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js"
      integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-fQybjgWLrvvRgtW6bFlB7jaZrFsaBXjsOMm/tB9LTS58ONXgqbR9W8oWht/amnpF"
      crossorigin="anonymous"
    ></script>

10.- Crear componentes del core con su módulo sin routing
ng g m @core/components/navbar
ng g m @core/components/loading

ng g c @core/components/navbar --skip-tests
ng g c @core/components/loading --skip-tests

